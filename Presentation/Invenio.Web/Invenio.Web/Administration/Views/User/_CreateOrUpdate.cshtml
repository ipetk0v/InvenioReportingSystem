@model UserModel

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function () {
        bindBootstrapTabSelectEvent('User-edit');
    });
</script>

<div class="content">
    <div class="form-horizontal">
        <div id="User-edit" class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                @Html.RenderBootstrapTabHeader("tab-info", @T("Admin.Users.Users.Info"), true)
                @if (Model.Id > 0)
                {
                    @Html.RenderBootstrapTabHeader("tab-activitylog", @T("Admin.Users.Users.ActivityLog"))
                }
                @if (Model.DisplayRewardPointsHistory)
                {
                    @Html.RenderBootstrapTabHeader("tab-rewardpoints", @T("Admin.Users.Users.RewardPoints"))
                }
            </ul>
            <div class="tab-content">
                @Html.RenderBootstrapTabContent("tab-info", @TabInfo(), true)
                @if (Model.Id > 0)
                {
                    @Html.RenderBootstrapTabContent("tab-activitylog", @TabActivityLog())
                }
            </div>
        </div>
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "User-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab name*@
<input type="hidden" id="selected-tab-name" name="selected-tab-name" value="@(Html.GetSelectedTabName())">

@helper TabInfo()
{
    if (Model.CountryEnabled && Model.StateProvinceEnabled)
    {
        <script type="text/javascript">
            $(document).ready(function() {
                $("#@Html.FieldIdFor(model => model.CountryId)").change(function() {
                    var selectedItem = $(this).val();
                    var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");

                    var postData = {
                        countryId: selectedItem,
                        addSelectStateItem: "true"
                    };

                    $.ajax({
                        cache: false,
                        type: "GET",
                        url: "@(Url.Action("GetStatesByCountryId", "Country"))",
                        data: postData,
                        success: function(data) {
                            ddlStates.html('');
                            $.each(data, function(id, option) {
                                ddlStates.append($('<option></option>').val(option.id).html(option.name));
                            });
                        },
                        error: function(xhr, ajaxOptions, thrownError) {
                            alert('Failed to retrieve states.');
                        }
                    });
                });
            });
        </script>
    }
    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                @if (Model.UsernamesEnabled)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Username)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.Username)
                            @Html.ValidationMessageFor(model => model.Username)
                        </div>
                    </div>
                }
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Email)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.Email)
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Password)
                    </div>
                    <div class="col-md-9">
                        <div class="input-group">
                            @Html.NopEditorFor(model => model.Password)
                            <div class="input-group-btn">
                                @if (Model.Id > 0)
                                {
                                    <button type="submit" name="changepassword" class="btn btn-info">
                                        @T("Admin.Users.Users.Fields.Password.Change")
                                    </button>
                                }
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.Password)
                    </div>
                </div>
                @if (Model.Id > 0 && Model.AssociatedExternalAuthRecords.Count > 0)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.AssociatedExternalAuthRecords)
                        </div>
                        <div class="col-md-9">

                            <div id="externalauthrecords-grid"></div>

                            <script>

                                //local datasource
                                var externalauthrecords = [
                                @for (int i = 0; i < Model.AssociatedExternalAuthRecords.Count; i++)
                                {
                                    var aear = Model.AssociatedExternalAuthRecords[i];
                                    <text>
                                        {
                                            AuthMethodName: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(aear.AuthMethodName)))",
                                            Email: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(aear.Email)))",
                                            ExternalIdentifier: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(aear.ExternalIdentifier)))"
                                        }
                                    </text>
                                    if (i != Model.AssociatedExternalAuthRecords.Count - 1)
                                    {
                                        <text>,</text>
                                    }
                                }
                                ];

                                $(document).ready(function () {
                                    $("#externalauthrecords-grid").kendoGrid({
                                        dataSource: {
                                            data: externalauthrecords,
                                            schema: {
                                                model: {
                                                    fields: {
                                                        AuthMethodName: { type: "string" },
                                                        Email: { type: "string" },
                                                        ExternalIdentifier: { type: "string" }
                                                    }
                                                }
                                            },
                                            error: function (e) {
                                                display_kendoui_grid_error(e);
                                                // Cancel the changes
                                                this.cancelChanges();
                                            }
                                        },
                                        pageable: {
                                            refresh: true,
                                            numeric: false,
                                            previousNext: false,
                                            info: false,
                                            @Html.Partial("_GridPagerMessages")
                                        },
                                        scrollable: false,
                                        columns: [
                                            {
                                                field: "AuthMethodName",
                                                title: "@T("Admin.Users.Users.AssociatedExternalAuth.Fields.AuthMethodName")",
                                                width: 100
                                            }, {
                                                field: "Email",
                                                title: "@T("Admin.Users.Users.AssociatedExternalAuth.Fields.Email")",
                                                width: 100
                                            },{
                                                field: "ExternalIdentifier",
                                                title: "@T("Admin.Users.Users.AssociatedExternalAuth.Fields.ExternalIdentifier")",
                                                width: 300
                                            }
                                        ]
                                    });
                                });

                            </script>
                        </div>
                    </div>
                }
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.SelectedUserRoleIds)
                </div>
                <div class="col-md-9">
                    <div class="input-group input-group-required">
                        @Html.EditorFor(model => model.SelectedUserRoleIds, new { SelectList = Model.AvailableUserRoles })
                        <div class="input-group-btn">
                            @Html.RequiredHint()
                        </div>
                    </div>
                    <script>
                        $(document).ready(function() {
                            var UserRolesIdsInput = $('#@Html.FieldIdFor(model => model.SelectedUserRoleIds)').data("kendoMultiSelect");
                            UserRolesIdsInput.setOptions({
                                UserRolesIdsInput: false
                            });

                            @if (Model.AvailableUserRoles.Count == 0)
                            {
                                <text>
                                    UserRolesIdsInput.setOptions({
                                        enable: false,
                                        placeholder: '@T("Admin.Users.Users.Fields.UserRoles.NoRoles")'
                                    });
                                    UserRolesIdsInput._placeholder();
                                    UserRolesIdsInput._enable();
                                </text>
                            }
                        });
                    </script>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-3">
                    @Html.NopLabelFor(model => model.SelectedManufacturerRegionIds)
                </div>
                <div class="col-md-9">
                    <div class="input-group input-group-required">
                        @Html.EditorFor(model => model.SelectedManufacturerRegionIds, new { SelectList = Model.AvailableManufacturerRegions })
                        <div class="input-group-btn">
                            @Html.RequiredHint()
                        </div>
                    </div>
                    <script>
                        $(document).ready(function() {
                            var ManufacturerRegionIdsInput = $('#@Html.FieldIdFor(model => model.SelectedManufacturerRegionIds)').data("kendoMultiSelect");
                            ManufacturerRegionIdsInput.setOptions({
                                ManufacturerRegionIdsInput: false
                            });

                            @if (Model.AvailableManufacturerRegions.Count == 0)
                            {
                                <text>
                                    ManufacturerRegionIdsInput.setOptions({
                                        enable: false,
                                        placeholder: '@T("Admin.Users.Users.Fields.ManufacturerRegion.NoRegionManufacturer")'
                                    });
                                    ManufacturerRegionIdsInput._placeholder();
                                    ManufacturerRegionIdsInput._enable();
                                </text>
                            }
                        });
                    </script>
                </div>
            </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.SelectedManufacturerIds)
                    </div>
                    <div class="col-md-9">
                        <div class="input-group input-group-required">
                            @Html.EditorFor(model => model.SelectedManufacturerIds, new { SelectList = Model.AvailableManufacturers })
                            <div class="input-group-btn">
                                @Html.RequiredHint()
                            </div>
                        </div>
                        <script>
                        $(document).ready(function() {
                            var ManufacturerIdsInput = $('#@Html.FieldIdFor(model => model.SelectedManufacturerIds)').data("kendoMultiSelect");
                            ManufacturerIdsInput.setOptions({
                                ManufacturerIdsInput: false
                            });

                            @if (Model.AvailableManufacturers.Count == 0)
                            {
                                <text>
                            ManufacturerIdsInput.setOptions({
                                        enable: false,
                                        placeholder: '@T("Admin.Users.Users.Fields.Manufacturer.NoManufacturer")'
                                    });
                            ManufacturerIdsInput._placeholder();
                            ManufacturerIdsInput._enable();
                                </text>
                            }
                        });
                        </script>
                    </div>
                </div>
                @*<div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.VendorId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDropDownListFor(model => model.VendorId, Model.AvailableVendors)
                            @Html.ValidationMessageFor(model => model.VendorId)
                            <em>@T("Admin.Users.Users.VendorShouldBeInVendorsRole")</em>
                        </div>
                    </div>*@
                @*@if (Model.GenderEnabled)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Gender)
                        </div>
                        <div class="col-md-9">
                            <div class="raw">
                                <div class="col-md-1">
                                    <div class="radio">
                                        <label>
                                            @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "Gender_Male" })
                                            @T("Admin.Users.Users.Fields.Gender.Male")
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-11">
                                    <div class="radio">
                                        <label>
                                            @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "Gender_Female" })
                                            @T("Admin.Users.Users.Fields.Gender.Female")
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }*@
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.FirstName)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.FirstName)
                        @Html.ValidationMessageFor(model => model.FirstName)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.LastName)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.LastName)
                        @Html.ValidationMessageFor(model => model.LastName)
                    </div>
                </div>
                @*@if (Model.DateOfBirthEnabled)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.DateOfBirth)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.DateOfBirth)
                            @Html.ValidationMessageFor(model => model.DateOfBirth)
                        </div>
                    </div>
                }
                @if (Model.CompanyEnabled)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Company)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.Company)
                            @Html.ValidationMessageFor(model => model.Company)
                        </div>
                    </div>
                }
                @if (Model.StreetAddressEnabled)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.StreetAddress)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.StreetAddress)
                            @Html.ValidationMessageFor(model => model.StreetAddress)
                        </div>
                    </div>
                }
                @if (Model.StreetAddress2Enabled)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.StreetAddress2)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.StreetAddress2)
                            @Html.ValidationMessageFor(model => model.StreetAddress2)
                        </div>
                    </div>
                }
                @if (Model.ZipPostalCodeEnabled)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.ZipPostalCode)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.ZipPostalCode)
                            @Html.ValidationMessageFor(model => model.ZipPostalCode)
                        </div>
                    </div>
                }
                @if (Model.CityEnabled)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.City)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.City)
                            @Html.ValidationMessageFor(model => model.City)
                        </div>
                    </div>
                }
                @if (Model.CountryEnabled)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CountryId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDropDownList("CountryId", Model.AvailableCountries)
                            @Html.ValidationMessageFor(model => model.CountryId)
                        </div>
                    </div>
                }
                @if (Model.CountryEnabled && Model.StateProvinceEnabled)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.StateProvinceId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDropDownList("StateProvinceId", Model.AvailableStates)
                            @Html.ValidationMessageFor(model => model.StateProvinceId)
                        </div>
                    </div>
                }*@
                @*@if (Model.PhoneEnabled)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Phone)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.Phone)
                            @Html.ValidationMessageFor(model => model.Phone)
                        </div>
                    </div>
                }
                @if (Model.FaxEnabled)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.Fax)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.Fax)
                            @Html.ValidationMessageFor(model => model.Fax)
                        </div>
                    </div>
                }
                @if (Model.UserAttributes.Count > 0)
                {
                    @Html.Partial("_UserAttributes", Model.UserAttributes)
                }*@
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.AdminComment)
                    </div>
                    <div class="col-md-9">
                        @Html.NopTextAreaFor(model => model.AdminComment)
                        @Html.ValidationMessageFor(model => model.AdminComment)
                    </div>
                </div>
                @*<div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.IsTaxExempt)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.IsTaxExempt)
                            @Html.ValidationMessageFor(model => model.IsTaxExempt)
                        </div>
                    </div>*@
                @if (Model.AllowUsersToSetTimeZone)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.TimeZoneId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDropDownList("TimeZoneId", Model.AvailableTimeZones)
                            @Html.ValidationMessageFor(model => model.TimeZoneId)
                        </div>
                    </div>
                }
                @*@if (Model.AffiliateId > 0)
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.AffiliateId)
                            </div>
                            <div class="col-md-9">
                                <a href="@Url.Action("Edit", "Affiliate", new {id = Model.AffiliateId})">@Model.AffiliateName - @T("Admin.Common.View")</a>
                                <button type="submit" name="remove-affiliate" class="btn bg-red">
                                    @T("Admin.Users.Users.Fields.Affiliate.Remove")
                                </button>
                            </div>
                        </div>
                    }
                    @if (Model.DisplayVatNumber)
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.VatNumber)
                            </div>
                            <div class="col-md-9">
                                @Html.NopEditorFor(model => model.VatNumber)
                                (@string.Format(T("Admin.Users.Users.Fields.VatNumberStatus").Text, Model.VatNumberStatusNote))
                                <button type="submit" name="markVatNumberAsValid" class="btn btn-primary">
                                    @T("Admin.Users.Users.Fields.VatNumber.MarkAsValid")
                                </button>
                                <button type="submit" name="markVatNumberAsInvalid" class="btn bg-red">
                                    @T("Admin.Users.Users.Fields.VatNumber.MarkAsInvalid")
                                </button>
                                @Html.ValidationMessageFor(model => model.VatNumber)
                            </div>
                        </div>
                    }*@
                @*@if (Model.AvailableNewsletterSubscriptionStores != null && Model.AvailableNewsletterSubscriptionStores.Count > 0)
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.SelectedNewsletterSubscriptionStoreIds)
                            </div>
                            <div class="col-md-9">
                                @foreach (var store in Model.AvailableNewsletterSubscriptionStores)
                                {
                                    <div class="checkbox">
                                        <label>
                                            <input type="checkbox" name="SelectedNewsletterSubscriptionStoreIds" value="@store.Id" checked="@(Model.SelectedNewsletterSubscriptionStoreIds != null && Model.SelectedNewsletterSubscriptionStoreIds.Contains(store.Id))" />
                                            (@(store.Name))
                                        </label>
                                    </div>
                                }
                            </div>
                        </div>
                    }*@
                @*else
                    {
                        @T("Admin.Users.Users.Fields.UserRoles.NoRoles")
                    }*@
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.NopLabelFor(model => model.Active)
                    </div>
                    <div class="col-md-9">
                        @Html.NopEditorFor(model => model.Active)
                        @Html.ValidationMessageFor(model => model.Active)
                    </div>
                </div>
                @*@if (Model.Id > 0 && !string.IsNullOrEmpty(Model.RegisteredInStore))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.NopLabelFor(model => model.RegisteredInStore)
                            </div>
                            <div class="col-md-9">
                                @Html.NopDisplayFor(model => model.RegisteredInStore)
                            </div>
                        </div>
                    }*@
                @if (Model.Id > 0)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.LastIpAddress)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDisplayFor(model => model.LastIpAddress)
                        </div>
                    </div>
                }
                @if (Model.Id > 0)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.CreatedOn)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDisplayFor(model => model.CreatedOn)
                        </div>
                    </div>
                }
                @if (Model.Id > 0)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.LastActivityDate)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDisplayFor(model => model.LastActivityDate)
                        </div>
                    </div>
                }
                @if (Model.Id > 0 && !String.IsNullOrEmpty(Model.LastVisitedPage))
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.LastVisitedPage)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDisplayFor(model => model.LastVisitedPage)
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@helper TabActivityLog()
{
    var defaultGridPageSize = EngineContext.Current.Resolve<Invenio.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Invenio.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                <div id="activitylog-grid"></div>

                <script>
                    $(document).ready(function () {
                        $("#activitylog-grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("ListActivityLog", "User", new { UserId = Model.Id }))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors"
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                pageSize: @(defaultGridPageSize),
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true,
                                pageSizes: [@(gridPageSizes)],
                                @Html.Partial("_GridPagerMessages")
                            },
                            editable: {
                                confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                mode: "inline"
                            },
                            scrollable: false,
                            columns: [{
                                field: "ActivityLogTypeName",
                                title: "@T("Admin.Users.Users.ActivityLog.ActivityLogType")",
                                width: 300,
                            }, {
                                field: "IpAddress",
                                title: "@T("Admin.Users.Users.ActivityLog.IpAddress")",
                                width: 100
                            }, {
                                field: "Comment",
                                title: "@T("Admin.Users.Users.ActivityLog.Comment")"
                            }, {
                                field: "CreatedOn",
                                title: "@T("Admin.Users.Users.ActivityLog.CreatedOn")",
                                width: 200,
                                type: "date",
                                format: "{0:G}"
                            }]
                        });
                    });
                </script>
            </div>
        </div>
    </div>
}

@*@helper TabImpersonate()
    {
        <div class="panel-group">
            <div class="panel panel-default">
                <div class="panel-body">
                    <ul class="common-list">
                        <li>@T("Admin.Users.Users.Impersonate.Description1")</li>
                        <li>@T("Admin.Users.Users.Impersonate.Description2")</li>
                    </ul>
                    <button type="submit" name="impersonate" class="btn btn-primary">
                        <i class="fa fa-shopping-cart"></i>
                        @T("Admin.Users.Users.Impersonate.Button")
                    </button>
                </div>
            </div>
        </div>
    }*@

@*@helper TabBackInStockSubscriptions()
    {
        var defaultGridPageSize = EngineContext.Current.Resolve<Invenio.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
        var gridPageSizes = EngineContext.Current.Resolve<Invenio.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;
        var stores = EngineContext.Current.Resolve<IStoreService>().GetAllStores();

        <div class="panel-group">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div id="backinstock-subscriptions-grid"></div>

                    <script>
                        $(document).ready(function () {
                            $("#backinstock-subscriptions-grid").kendoGrid({
                                dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: "@Html.Raw(Url.Action("BackInStockSubscriptionList", "User", new { UserId = Model.Id }))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        }
                                    },
                                    schema: {
                                        data: "Data",
                                        total: "Total",
                                        errors: "Errors"
                                    },
                                    error: function(e) {
                                        display_kendoui_grid_error(e);
                                        // Cancel the changes
                                        this.cancelChanges();
                                    },
                                    pageSize: @(defaultGridPageSize),
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: true
                                },
                                pageable: {
                                    refresh: true,
                                    pageSizes: [@(gridPageSizes)],
                                    @Html.Partial("_GridPagerMessages")
                                },
                                editable: {
                                    confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                    mode: "inline"
                                },
                                scrollable: false,
                                columns: [{
                                    field: "StoreName",
                                    hidden: @(stores.Count > 1 ? "false" : "true"),
                                    title: "@T("Admin.Users.Users.BackInStockSubscriptions.Store")",
                                    width: 200,
                                }, {
                                    field: "ProductId",
                                    title: "@T("Admin.Users.Users.BackInStockSubscriptions.Product")",
                                    width: 300,
                                    template: '<a href="@Url.Content("~/Admin/Product/Edit/")#=ProductId#">#:ProductName#</a>'
                                },{
                                    field: "CreatedOn",
                                    title: "@T("Admin.Users.Users.BackInStockSubscriptions.CreatedOn")",
                                    width: 200,
                                    type: "date",
                                    format: "{0:G}"
                                }]
                            });
                        });
                    </script>
                </div>
            </div>
        </div>
    }

    @helper TabRewardPoints()
    {
    var defaultGridPageSize = EngineContext.Current.Resolve<Invenio.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    var gridPageSizes = EngineContext.Current.Resolve<Invenio.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;
    var stores = EngineContext.Current.Resolve<IStoreService>().GetAllStores();

        <div class="panel-group">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div id="User-rewardpoints-grid"></div>

                    <script>
                        $(document).ready(function() {
                            $("#User-rewardpoints-grid").kendoGrid({
                                dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: "@Html.Raw(Url.Action("RewardPointsHistorySelect", "User", new {UserId = Model.Id}))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        }
                                    },
                                    schema: {
                                        data: "Data",
                                        total: "Total",
                                        errors: "Errors"
                                    },
                                    error: function(e) {
                                        display_kendoui_grid_error(e);
                                        // Cancel the changes
                                        this.cancelChanges();
                                    },
                                    pageSize: @(defaultGridPageSize),
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: true
                                },
                                pageable: {
                                    refresh: true,
                                    pageSizes: [@(gridPageSizes)],
                                    @Html.Partial("_GridPagerMessages")
                                },
                                editable: {
                                    confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                    mode: "inline"
                                },
                                scrollable: false,
                                columns: [
                                {
                                    field: "StoreName",
                                    title: "@T("Admin.Users.Users.RewardPoints.Fields.Store")",
                                    hidden: @(stores.Count > 1 ? "false" : "true"),
                                }, {
                                    field: "Points",
                                    title: "@T("Admin.Users.Users.RewardPoints.Fields.Points")"
                                }, {
                                    field: "PointsBalance",
                                    title: "@T("Admin.Users.Users.RewardPoints.Fields.PointsBalance")"
                                }, {
                                    field: "Message",
                                    title: "@T("Admin.Users.Users.RewardPoints.Fields.Message")"
                                }, {
                                    field: "CreatedOn",
                                    title: "@T("Admin.Promotions.Campaigns.Fields.CreatedOn")",
                                    width: 200,
                                    type: "date",
                                    format: "{0:G}"
                                }
                                ]
                            });
                        });
                    </script>
                </div>
            </div>

            <div class="panel panel-default">
                <div class="panel-heading">
                    @T("Admin.Users.Users.RewardPoints.AddTitle")
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.AddRewardPointsValue)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.AddRewardPointsValue)
                            @Html.ValidationMessageFor(model => model.AddRewardPointsValue)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.AddRewardPointsMessage)
                        </div>
                        <div class="col-md-9">
                            @Html.NopEditorFor(model => model.AddRewardPointsMessage)
                            @Html.ValidationMessageFor(model => model.AddRewardPointsMessage)
                        </div>
                    </div>
                    <div class="form-group" @(Model.RewardPointsAvailableStores.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                        <div class="col-md-3">
                            @Html.NopLabelFor(model => model.AddRewardPointsStoreId)
                        </div>
                        <div class="col-md-9">
                            @Html.NopDropDownListFor(model => model.AddRewardPointsStoreId, Model.RewardPointsAvailableStores)
                            @Html.ValidationMessageFor(model => model.AddRewardPointsStoreId)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-9 col-md-offset-3">
                            <button type="button" id="addRewardPoints" class="btn btn-primary">@T("Admin.Users.Users.RewardPoints.AddButton")</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script type="text/javascript">
            $(document).ready(function () {
                $('#addRewardPoints').click(function () {
                    var rewardPointsValue = $("#@Html.FieldIdFor(model => model.AddRewardPointsValue)").val();
                    var rewardPointsMessage = $("#@Html.FieldIdFor(model => model.AddRewardPointsMessage)").val();
                    var rewardPointsStoreId = $("#@Html.FieldIdFor(model => model.AddRewardPointsStoreId)").val();
                    $('#addRewardPoints').attr('disabled', true);

                    var postData = {
                        addRewardPointsValue: rewardPointsValue,
                        addRewardPointsMessage: rewardPointsMessage,
                        storeId: rewardPointsStoreId,
                        UserId: @Model.Id
                        };
                    addAntiForgeryToken(postData);

                    $.ajax({
                        cache:false,
                        type: "POST",
                        url: "@(Url.Action("RewardPointsHistoryAdd", "User"))",
                        data: postData,
                        success: function (data) {
                            var grid = $("#User-rewardpoints-grid").data('kendoGrid');
                            grid.dataSource.read();
                            $('#addRewardPoints').attr('disabled', false);
                        },
                        error:function (xhr, ajaxOptions, thrownError){
                            alert('Failed to add reward points.');
                            $('#addRewardPoints').attr('disabled', false);
                        }
                    });
                });
            });
        </script>
    }*@